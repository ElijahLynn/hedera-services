/*
 * Copyright (C) 2023 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.swirlds.config.processor;

import edu.umd.cs.findbugs.annotations.NonNull;
import java.io.IOException;
import java.io.Writer;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Objects;
import javax.tools.JavaFileObject;
import org.jboss.forge.roaster.Roaster;
import org.jboss.forge.roaster.model.source.JavaClassSource;

public class ConstantClassFactory {

    private ConstantClassFactory() {}

    public static void doWork(
            @NonNull final ConfigDataRecordDefinition configDataRecordDefinition,
            @NonNull final JavaFileObject constantsSourceFile)
            throws IOException {

        Objects.requireNonNull(configDataRecordDefinition, "configDataRecordDefinition must not be null");
        Objects.requireNonNull(constantsSourceFile, "constantsSourceFile must not be null");

        final String orginalRecordClassName =
                configDataRecordDefinition.packageName() + "." + configDataRecordDefinition.simpleClassName();
        final JavaClassSource javaClassSource = Roaster.create(JavaClassSource.class);
        javaClassSource.setPackage(configDataRecordDefinition.packageName());
        javaClassSource.setName(
                configDataRecordDefinition.simpleClassName() + ConfigProcessorConstants.CONSTANTS_CLASS_SUFFIX);
        javaClassSource.setFinal(true);
        javaClassSource
                .getJavaDoc()
                .setText("Constaints constants for all the property names that are part of {@link "
                        + orginalRecordClassName + "}. Generated by {@code " + ConstantClassFactory.class.getName()
                        + "} on "
                        + DateTimeFormatter.ISO_DATE_TIME.format(LocalDateTime.now()) + ".");
        javaClassSource.getJavaDoc().addTagValue("@see", orginalRecordClassName);

        configDataRecordDefinition.propertyDefinitions().forEach(propertyDefinition -> {
            final String name = toConstantName(
                    propertyDefinition.name().replace(configDataRecordDefinition.configDataName() + ".", ""));
            javaClassSource
                    .addField()
                    .setName(name)
                    .setType(ConfigProcessorConstants.JAVA_LANG_STRING)
                    .setLiteralInitializer("\"" + propertyDefinition.name() + "\"")
                    .setPublic()
                    .setStatic(true)
                    .getJavaDoc()
                    .setText("Name of the {@link " + orginalRecordClassName + "#" + propertyDefinition.fieldName()
                            + "} property")
                    .addTagValue("@see", orginalRecordClassName + "#" + propertyDefinition.fieldName());
        });
        try (final Writer writer = constantsSourceFile.openWriter()) {
            writer.append(javaClassSource.toString());
        }
    }

    @NonNull
    public static String toConstantName(@NonNull final String propertyName) {
        Objects.requireNonNull(propertyName, "propertyName must not be null");

        final StringBuilder builder = new StringBuilder();
        for (int i = 0; i < propertyName.length(); i++) {
            final char character = propertyName.charAt(i);
            if (i > 0 && Character.isUpperCase(character)) {
                builder.append("_");
                builder.append(character);
            } else {
                builder.append(Character.toUpperCase(character));
            }
        }
        return builder.toString();
    }
}
