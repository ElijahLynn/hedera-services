/*
 * Copyright (C) 2023 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hedera.node.app.service.mono.store.contracts.precompile.specification;

import static org.assertj.core.api.Assertions.assertThat;

import edu.umd.cs.findbugs.annotations.NonNull;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.EnumSet;
import java.util.Map;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

/**
 * This test generates the file `AbiConstants.java` given the ground truth at `SystemContractAbis`
 * <p>
 * Currently only handles methods.  Needs to be expanded to handle events too.
 * <p>
 * An improvement would be to add HIP # where the method/event was specified.
 * <p>
 * Poor man's text template generator.  _Very_ poor man's.  But it doesn't matter: This "test" is
 * executed manually (right now) whenever it is desired to update `AbiConstants.java`.  (Even when
 * integrated into the build the resource use (CPU/memory) doesn't really matter: It isn't THAT bad.)
 */
class GenerateAbiConstantsClassTest {

    @Test
    @DisplayName("Generates the source file AbiConstants.java from the SystemContractAbis")
    @Disabled("this test for debugging only - generates source code to System.out")
    void generate() {
        final var generatedSource = generateAbiConstantClass(2022);
        assertThat(generatedSource).isNotEmpty();

        System.out.print(generatedSource);
    }

    @NonNull
    String generateAbiConstantClass(final int firstCopyrightYear) {
        var t =
                """
    ${COPYRIGHT}

    /*** GENERATED CODE: DO NOT EDIT!  Generated by `SystemContractAbis.generateAbiConstants()`. ***/

    package com.hedera.node.app.service.mono.store.contracts.precompile.specification;

    // spotless:off
    public final class AbiConstants {

        ${ABI_ENTRIES}

        private AbiConstants() {
            throw new UnsupportedOperationException("Utility class");
        }
    }
    // spotless:on
    """;
        return expandTemplate(
                t,
                Map.of(
                        "COPYRIGHT",
                        abiCopyright(firstCopyrightYear),
                        "ABI_ENTRIES",
                        generateAllAbiConstantMethodEntries()));
    }

    @NonNull
    String abiEntry(@NonNull final SystemContractAbis abi) {
        var t =
                """

        // ${ABI_GIVEN_SIGNATURE} returns ${ABI_GIVEN_RETURNS_SIGNATURE}
        public static final int ${ABI_CONSTANT_NAME} = ${ABI_HEX_SELECTOR};
    """;
        return expandTemplate(
                t,
                Map.of(
                        "ABI_GIVEN_SIGNATURE",
                        abi.givenSignature,
                        "ABI_GIVEN_RETURNS_SIGNATURE",
                        abi.givenReturnsSignature,
                        "ABI_CONSTANT_NAME",
                        abi.abiConstantName,
                        "ABI_HEX_SELECTOR",
                        abi.selectorAsHex()));
    }

    @NonNull
    String generateAllAbiConstantMethodEntries() {
        final var sb = new StringBuilder(10000);
        EnumSet.allOf(SystemContractAbis.class).stream()
                .filter(SystemContractAbis::isMethod)
                .sorted()
                .forEach(method -> sb.append(abiEntry(method)));
        return sb.toString();
    }

    @NonNull
    String abiCopyright(final int firstCopyrightYear) {
        // Probably no advantage to having this be a resource instead of an inline text block
        final var copyrightTemplate =
                """
    /*
     * Copyright (C) ${COPYRIGHT_RANGE} Hedera Hashgraph, LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
     """;

        final var thisYear = getCurrentYear();
        final var copyrightRange = firstCopyrightYear == thisYear
                ? String.valueOf(thisYear)
                : "%d-%d".formatted(firstCopyrightYear, thisYear);

        return expandTemplate(copyrightTemplate, "COPYRIGHT_RANGE", copyrightRange);
    }

    @NonNull
    String expandTemplate(@NonNull final String template, @NonNull final Map<String, String> substitutions) {
        var r = template;
        for (final var kv : substitutions.entrySet()) r = expandTemplate(r, kv.getKey(), kv.getValue());
        return r;
    }

    @NonNull
    String expandTemplate(
            @NonNull final String template, @NonNull final String variable, @NonNull final String substitution) {
        return template.replace("${" + variable + "}", substitution);
    }

    int getCurrentYear() {
        return ZonedDateTime.now(ZoneId.of("Z")).getYear();
    }
}
